
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BEGIN BOOLEAN CHAR CLOSE_BR CLOSE_SQUARE_BR COLON COMMA DIV DIVISION DO DOWNTO ELSE END EQUALITY EQUALS FALSE FOR FUNCTION ID IF INTEGER LESS LESS_OR_EQUAL MINUS MOD MORE MORE_OR_EQUAL MULTIPLICATION NOT_EQUAL NUMBER OF OPEN_BR OPEN_SQUARE_BR OR PLUS POINT QUOTE SEMICOLON STRING THEN TO TRUE VAR WHILE\n    main : declarations\n        | standart_subprogram\n        | if_statement\n        | expression\n        | standart_cycle\n    \n    declarations : VAR identifier_list COLON type SEMICOLON\n                | VAR identifier_list COLON type SEMICOLON complex_declar\n    \n    standart_subprogram : FUNCTION ID OPEN_BR parameter_list CLOSE_BR COLON standart_type SEMICOLON\n    \n    if_statement : IF OPEN_BR logic_expression CLOSE_BR EQUALS boolean_value then_else_statement\n                | IF OPEN_BR relational_expression CLOSE_BR then_else_statement\n    \n    then_else_statement : THEN compound_statement\n                | THEN simple_statement\n                | THEN compound_statement ELSE compound_statement\n                | THEN simple_statement ELSE compound_statement\n                | THEN compound_statement ELSE simple_statement\n                | THEN simple_statement ELSE simple_statement\n    \n    expression : math_expression\n                | logic_expression\n                | relational_expression\n                | assignment_expression\n    \n    standart_cycle : standart_while\n                    | standart_for\n    \n    parameter_list : identifier_list COLON type\n                    | parameter_list SEMICOLON identifier_list COLON type\n    \n    type : standart_type\n        | ARRAY OPEN_SQUARE_BR NUMBER POINT POINT NUMBER CLOSE_SQUARE_BR OF standart_type\n        | standart_string\n    \n    identifier_list : ID\n                    | identifier_list COMMA ID\n    \n    complex_declar : identifier_list COLON type SEMICOLON\n                | complex_declar identifier_list COLON type SEMICOLON\n    \n    standart_type : INTEGER\n                | CHAR\n                | BOOLEAN\n    \n    standart_string : STRING\n                    | STRING OPEN_SQUARE_BR NUMBER CLOSE_SQUARE_BR\n    \n    standart_while : WHILE OPEN_BR logic_expression CLOSE_BR DO compound_statement\n                    | WHILE OPEN_BR logic_expression CLOSE_BR DO simple_statement\n                    | WHILE OPEN_BR relational_expression CLOSE_BR DO compound_statement\n                    | WHILE OPEN_BR relational_expression CLOSE_BR DO simple_statement\n    \n    standart_for : FOR ID EQUALITY NUMBER TO NUMBER DO compound_statement\n                | FOR ID EQUALITY NUMBER DOWNTO NUMBER DO compound_statement\n    \n    assignment_expression : ID EQUALITY NUMBER\n                        | ID EQUALITY QUOTE ID QUOTE\n                        | ID EQUALITY boolean_value\n                        | ID EQUALITY math_expression\n                        | ID EQUALITY logic_expression\n    \n    relational_expression : simple_rel\n                            | complex_rel\n    \n    complex_rel : simple_math rel_sign ID\n                | complex_math rel_sign ID\n                | ID rel_sign simple_math\n                | ID rel_sign complex_math\n                | simple_math rel_sign NUMBER\n                | complex_math rel_sign NUMBER\n                | NUMBER rel_sign simple_math\n                | NUMBER rel_sign complex_math\n                | OPEN_BR simple_math CLOSE_BR rel_sign ID\n                | OPEN_BR complex_math CLOSE_BR rel_sign ID\n                | ID rel_sign OPEN_BR simple_math CLOSE_BR\n                | ID rel_sign OPEN_BR complex_math CLOSE_BR\n                | OPEN_BR simple_math CLOSE_BR rel_sign NUMBER\n                | OPEN_BR complex_math CLOSE_BR rel_sign NUMBER\n                | NUMBER rel_sign OPEN_BR simple_math CLOSE_BR\n                | NUMBER rel_sign OPEN_BR complex_math CLOSE_BR\n                | math_expression rel_sign math_expression\n                | OPEN_BR math_expression CLOSE_BR rel_sign OPEN_BR math_expression CLOSE_BR\n    \n    math_expression : simple_math\n                    | complex_math\n    \n    logic_expression : simple_logic\n                    | complex_logic\n    \n    complex_math : OPEN_BR simple_math CLOSE_BR math_sign ID\n                | OPEN_BR simple_math CLOSE_BR math_sign NUMBER\n                | ID math_sign OPEN_BR simple_math CLOSE_BR\n                | NUMBER math_sign OPEN_BR simple_math CLOSE_BR\n                | OPEN_BR simple_math CLOSE_BR math_sign OPEN_BR simple_math CLOSE_BR\n                | OPEN_BR simple_math CLOSE_BR math_sign OPEN_BR complex_math CLOSE_BR\n                | OPEN_BR complex_math CLOSE_BR math_sign ID\n                | OPEN_BR complex_math CLOSE_BR math_sign OPEN_BR simple_math CLOSE_BR\n                | OPEN_BR complex_math CLOSE_BR math_sign OPEN_BR complex_math CLOSE_BR\n    \n    complex_logic : OPEN_BR simple_logic CLOSE_BR log_sign ID\n                    | OPEN_BR simple_logic CLOSE_BR log_sign OPEN_BR simple_logic CLOSE_BR\n\t                | OPEN_BR complex_logic CLOSE_BR log_sign ID\n\t                | OPEN_BR complex_logic CLOSE_BR log_sign OPEN_BR simple_logic CLOSE_BR\n    \n    simple_math : ID math_sign ID\n                | ID math_sign NUMBER\n                | NUMBER math_sign ID\n                | NUMBER math_sign NUMBER\n    \n    compound_statement : BEGIN simple_statement END\n    \n    simple_statement : statement_list\n                    | empty\n    \n    statement_list : statement\n                    | statement_list SEMICOLON statement\n    \n    statement : assignment_expression\n            | standart_cycle\n    \n    simple_logic : ID log_sign ID\n    \n    simple_rel : ID rel_sign ID\n                | ID rel_sign NUMBER\n                | ID rel_sign QUOTE ID QUOTE\n    \n    log_sign : AND\n            | OR\n    \n    rel_sign : MORE_OR_EQUAL\n            | LESS_OR_EQUAL\n            | NOT_EQUAL\n            | MORE\n            | LESS\n            | EQUALS\n    \n    boolean_value : TRUE\n                    | FALSE\n    \n    math_sign : PLUS\n                | MINUS\n                | DIVISION\n                | MULTIPLICATION\n                | DIV\n                | MOD\n    empty :'
    
_lr_action_items = {'VAR':([0,],[7,]),'FUNCTION':([0,],[8,]),'IF':([0,],[11,]),'ID':([0,7,8,10,26,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,56,57,58,59,60,61,62,65,66,68,78,82,85,93,103,110,113,137,138,139,140,141,142,144,156,160,163,165,169,174,178,180,182,187,191,192,196,213,240,241,243,259,262,],[9,28,29,50,63,50,76,79,80,-110,-111,-112,-113,-114,-115,-100,-101,-102,-103,-104,-105,-106,-107,50,96,102,104,106,109,102,96,125,28,128,129,132,102,145,102,129,102,170,172,175,176,179,181,145,28,28,76,109,102,102,207,207,102,219,219,219,28,219,219,219,219,-30,-31,]),'WHILE':([0,187,191,192,213,240,241,243,],[25,25,25,25,25,25,25,25,]),'FOR':([0,187,191,192,213,240,241,243,],[26,26,26,26,26,26,26,26,]),'NUMBER':([0,10,30,31,33,34,35,36,37,38,39,42,43,44,45,46,47,48,56,57,58,59,60,61,62,78,85,93,103,110,113,116,137,138,140,144,157,158,163,165,169,174,182,193,194,248,],[24,51,67,77,81,-110,-111,-112,-113,-114,-115,-102,-103,-104,-105,-106,-107,51,97,51,105,107,108,51,97,131,51,51,51,131,51,155,171,173,177,51,197,198,77,108,51,51,51,224,225,261,]),'OPEN_BR':([0,10,11,25,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,56,57,60,61,62,85,93,103,113,137,139,141,142,143,144,169,174,182,],[10,48,56,62,66,48,78,85,-110,-111,-112,-113,-114,-115,-100,-101,-102,-103,-104,-105,-106,-107,48,93,103,110,113,93,103,144,103,103,169,174,178,180,182,144,103,103,103,]),'$end':([1,2,3,4,5,6,12,13,14,15,16,17,18,19,20,21,22,23,67,69,70,71,72,73,74,75,76,77,79,80,81,83,84,101,104,105,106,107,108,109,111,112,156,162,164,166,167,168,170,171,172,173,175,176,177,179,181,186,187,188,189,190,191,192,196,211,212,214,215,216,217,218,220,221,222,223,232,233,234,235,236,237,238,239,240,241,249,251,252,253,254,255,256,257,258,259,262,],[0,-1,-2,-3,-4,-5,-18,-19,-17,-20,-21,-22,-68,-69,-70,-71,-48,-49,-43,-45,-46,-47,-108,-109,-68,-69,-85,-86,-96,-97,-98,-52,-53,-66,-50,-54,-51,-55,-88,-87,-56,-57,-6,-44,-74,-99,-60,-61,-72,-73,-58,-62,-78,-59,-63,-81,-83,-10,-116,-75,-64,-65,-116,-116,-7,-11,-12,-90,-91,-92,-94,-95,-37,-38,-39,-40,-76,-77,-80,-79,-82,-84,-67,-9,-116,-116,-8,-13,-15,-16,-14,-89,-93,-41,-42,-30,-31,]),'EQUALITY':([9,63,219,],[30,116,30,]),'PLUS':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'MINUS':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DIVISION':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'MULTIPLICATION':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'DIV':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'MOD':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'AND':([9,50,90,91,96,145,207,],[40,40,40,40,40,40,40,]),'OR':([9,50,90,91,96,145,207,],[41,41,41,41,41,41,41,]),'MORE_OR_EQUAL':([9,14,18,19,24,76,77,88,89,92,96,97,98,99,100,108,109,164,170,171,175,183,184,188,232,233,234,235,],[42,42,42,42,42,-85,-86,42,42,42,42,42,42,42,42,-88,-87,-74,-72,-73,-78,42,42,-75,-76,-77,-80,-79,]),'LESS_OR_EQUAL':([9,14,18,19,24,76,77,88,89,92,96,97,98,99,100,108,109,164,170,171,175,183,184,188,232,233,234,235,],[43,43,43,43,43,-85,-86,43,43,43,43,43,43,43,43,-88,-87,-74,-72,-73,-78,43,43,-75,-76,-77,-80,-79,]),'NOT_EQUAL':([9,14,18,19,24,76,77,88,89,92,96,97,98,99,100,108,109,164,170,171,175,183,184,188,232,233,234,235,],[44,44,44,44,44,-85,-86,44,44,44,44,44,44,44,44,-88,-87,-74,-72,-73,-78,44,44,-75,-76,-77,-80,-79,]),'MORE':([9,14,18,19,24,76,77,88,89,92,96,97,98,99,100,108,109,164,170,171,175,183,184,188,232,233,234,235,],[45,45,45,45,45,-85,-86,45,45,45,45,45,45,45,45,-88,-87,-74,-72,-73,-78,45,45,-75,-76,-77,-80,-79,]),'LESS':([9,14,18,19,24,76,77,88,89,92,96,97,98,99,100,108,109,164,170,171,175,183,184,188,232,233,234,235,],[46,46,46,46,46,-85,-86,46,46,46,46,46,46,46,46,-88,-87,-74,-72,-73,-78,46,46,-75,-76,-77,-80,-79,]),'EQUALS':([9,14,18,19,24,76,77,88,89,92,96,97,98,99,100,108,109,148,164,170,171,175,183,184,188,232,233,234,235,],[47,47,47,47,47,-85,-86,47,47,47,47,47,47,47,47,-88,-87,185,-74,-72,-73,-78,47,47,-75,-76,-77,-80,-79,]),'SEMICOLON':([16,17,20,21,67,69,70,71,72,73,74,75,76,77,79,108,109,117,118,120,121,122,123,124,126,162,164,170,171,175,179,181,188,191,192,201,214,215,216,217,218,220,221,222,223,229,230,232,233,234,235,236,237,246,250,255,256,257,258,260,265,],[-21,-22,-70,-71,-43,-45,-46,-47,-108,-109,-68,-69,-85,-86,-96,-88,-87,156,-25,-27,-32,-33,-34,-35,160,-44,-74,-72,-73,-78,-81,-83,-75,-116,-116,-23,243,-91,-92,-94,-95,-37,-38,-39,-40,-36,249,-76,-77,-80,-79,-82,-84,259,-24,-89,-93,-41,-42,262,-26,]),'ELSE':([16,17,20,21,67,69,70,71,72,73,74,75,76,77,79,108,109,162,164,170,171,175,179,181,187,188,191,192,211,212,214,215,216,217,218,220,221,222,223,232,233,234,235,236,237,255,256,257,258,],[-21,-22,-70,-71,-43,-45,-46,-47,-108,-109,-68,-69,-85,-86,-96,-88,-87,-44,-74,-72,-73,-78,-81,-83,-116,-75,-116,-116,240,241,-90,-91,-92,-94,-95,-37,-38,-39,-40,-76,-77,-80,-79,-82,-84,-89,-93,-41,-42,]),'END':([16,17,20,21,67,69,70,71,72,73,74,75,76,77,79,108,109,162,164,170,171,175,179,181,188,191,192,213,214,215,216,217,218,220,221,222,223,232,233,234,235,236,237,242,255,256,257,258,],[-21,-22,-70,-71,-43,-45,-46,-47,-108,-109,-68,-69,-85,-86,-96,-88,-87,-44,-74,-72,-73,-78,-81,-83,-75,-116,-116,-116,-90,-91,-92,-94,-95,-37,-38,-39,-40,-76,-77,-80,-79,-82,-84,255,-89,-93,-41,-42,]),'CLOSE_BR':([20,21,22,23,49,52,53,54,55,74,75,76,77,79,80,81,83,84,86,87,94,95,101,104,105,106,107,108,109,111,112,114,115,118,120,121,122,123,124,126,130,133,134,146,147,150,151,152,164,166,167,168,170,171,172,173,175,176,177,179,181,188,189,190,201,202,203,204,205,206,208,209,229,232,233,234,235,236,237,238,250,265,],[-70,-71,-48,-49,88,89,90,91,92,-68,-69,-85,-86,-96,-97,-98,-52,-53,135,136,148,149,-66,-50,-54,-51,-55,-88,-87,-56,-57,153,154,-25,-27,-32,-33,-34,-35,159,164,167,168,183,184,188,189,190,-74,-99,-60,-61,-72,-73,-58,-62,-78,-59,-63,-81,-83,-75,-64,-65,-23,232,233,234,235,236,237,238,-36,-76,-77,-80,-79,-82,-84,-67,-24,-26,]),'COLON':([27,28,125,127,159,195,200,227,],[64,-28,-29,161,199,226,231,247,]),'COMMA':([27,28,125,127,195,200,227,],[65,-28,-29,65,65,65,65,]),'QUOTE':([30,33,42,43,44,45,46,47,128,132,],[68,82,-102,-103,-104,-105,-106,-107,162,166,]),'TRUE':([30,185,],[72,72,]),'FALSE':([30,185,],[73,73,]),'ARRAY':([64,161,226,231,247,],[119,119,119,119,119,]),'INTEGER':([64,161,199,226,231,247,264,],[121,121,121,121,121,121,121,]),'CHAR':([64,161,199,226,231,247,264,],[122,122,122,122,122,122,122,]),'BOOLEAN':([64,161,199,226,231,247,264,],[123,123,123,123,123,123,123,]),'STRING':([64,161,226,231,247,],[124,124,124,124,124,]),'THEN':([72,73,149,210,],[-108,-109,187,187,]),'OPEN_SQUARE_BR':([119,124,],[157,158,]),'DO':([153,154,224,225,],[191,192,244,245,]),'TO':([155,],[193,]),'DOWNTO':([155,],[194,]),'BEGIN':([187,191,192,240,241,244,245,],[213,213,213,213,213,213,213,]),'POINT':([197,228,],[228,248,]),'CLOSE_SQUARE_BR':([198,261,],[229,263,]),'OF':([263,],[264,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'declarations':([0,],[2,]),'standart_subprogram':([0,],[3,]),'if_statement':([0,],[4,]),'expression':([0,],[5,]),'standart_cycle':([0,187,191,192,213,240,241,243,],[6,218,218,218,218,218,218,218,]),'logic_expression':([0,30,56,62,],[12,71,94,114,]),'relational_expression':([0,56,62,],[13,95,115,]),'math_expression':([0,10,30,56,57,62,93,182,],[14,55,70,100,101,100,55,209,]),'assignment_expression':([0,187,191,192,213,240,241,243,],[15,217,217,217,217,217,217,217,]),'standart_while':([0,187,191,192,213,240,241,243,],[16,16,16,16,16,16,16,16,]),'standart_for':([0,187,191,192,213,240,241,243,],[17,17,17,17,17,17,17,17,]),'simple_math':([0,10,30,33,48,56,57,61,62,78,85,93,103,110,113,144,169,174,182,],[18,49,74,83,86,98,74,111,98,130,133,146,86,150,151,86,202,205,74,]),'complex_math':([0,10,30,33,48,56,57,61,62,85,93,103,113,144,169,174,182,],[19,52,75,84,87,99,75,112,99,134,147,87,152,87,203,204,75,]),'simple_logic':([0,10,30,48,56,62,93,144,178,180,],[20,53,20,53,20,20,53,53,206,208,]),'complex_logic':([0,10,30,48,56,62,93,144,],[21,54,21,54,21,21,54,54,]),'simple_rel':([0,56,62,],[22,22,22,]),'complex_rel':([0,56,62,],[23,23,23,]),'identifier_list':([7,66,156,160,196,],[27,127,195,200,227,]),'math_sign':([9,24,50,51,67,80,81,88,89,96,97,102,129,131,135,136,145,167,168,183,184,189,190,],[31,60,31,60,60,31,60,137,139,31,60,31,163,165,137,139,31,137,139,137,139,137,139,]),'log_sign':([9,50,90,91,96,145,207,],[32,32,141,142,32,32,32,]),'rel_sign':([9,14,18,19,24,88,89,92,96,97,98,99,100,183,184,],[33,57,58,59,61,138,140,143,33,61,58,59,57,138,140,]),'boolean_value':([30,185,],[69,210,]),'type':([64,161,226,231,247,],[117,201,246,250,260,]),'standart_type':([64,161,199,226,231,247,264,],[118,118,230,118,118,118,265,]),'standart_string':([64,161,226,231,247,],[120,120,120,120,120,]),'parameter_list':([66,],[126,]),'then_else_statement':([149,210,],[186,239,]),'complex_declar':([156,],[196,]),'compound_statement':([187,191,192,240,241,244,245,],[211,220,222,251,254,257,258,]),'simple_statement':([187,191,192,213,240,241,],[212,221,223,242,252,253,]),'statement_list':([187,191,192,213,240,241,],[214,214,214,214,214,214,]),'empty':([187,191,192,213,240,241,],[215,215,215,215,215,215,]),'statement':([187,191,192,213,240,241,243,],[216,216,216,216,216,216,256,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> declarations','main',1,'p_main','main.py',156),
  ('main -> standart_subprogram','main',1,'p_main','main.py',157),
  ('main -> if_statement','main',1,'p_main','main.py',158),
  ('main -> expression','main',1,'p_main','main.py',159),
  ('main -> standart_cycle','main',1,'p_main','main.py',160),
  ('declarations -> VAR identifier_list COLON type SEMICOLON','declarations',5,'p_declarations','main.py',172),
  ('declarations -> VAR identifier_list COLON type SEMICOLON complex_declar','declarations',6,'p_declarations','main.py',173),
  ('standart_subprogram -> FUNCTION ID OPEN_BR parameter_list CLOSE_BR COLON standart_type SEMICOLON','standart_subprogram',8,'p_standart_subprogram','main.py',187),
  ('if_statement -> IF OPEN_BR logic_expression CLOSE_BR EQUALS boolean_value then_else_statement','if_statement',7,'p_if_statement','main.py',211),
  ('if_statement -> IF OPEN_BR relational_expression CLOSE_BR then_else_statement','if_statement',5,'p_if_statement','main.py',212),
  ('then_else_statement -> THEN compound_statement','then_else_statement',2,'p_then_else_statement','main.py',227),
  ('then_else_statement -> THEN simple_statement','then_else_statement',2,'p_then_else_statement','main.py',228),
  ('then_else_statement -> THEN compound_statement ELSE compound_statement','then_else_statement',4,'p_then_else_statement','main.py',229),
  ('then_else_statement -> THEN simple_statement ELSE compound_statement','then_else_statement',4,'p_then_else_statement','main.py',230),
  ('then_else_statement -> THEN compound_statement ELSE simple_statement','then_else_statement',4,'p_then_else_statement','main.py',231),
  ('then_else_statement -> THEN simple_statement ELSE simple_statement','then_else_statement',4,'p_then_else_statement','main.py',232),
  ('expression -> math_expression','expression',1,'p_expression','main.py',256),
  ('expression -> logic_expression','expression',1,'p_expression','main.py',257),
  ('expression -> relational_expression','expression',1,'p_expression','main.py',258),
  ('expression -> assignment_expression','expression',1,'p_expression','main.py',259),
  ('standart_cycle -> standart_while','standart_cycle',1,'p_standart_cycle','main.py',267),
  ('standart_cycle -> standart_for','standart_cycle',1,'p_standart_cycle','main.py',268),
  ('parameter_list -> identifier_list COLON type','parameter_list',3,'p_parameter_list','main.py',278),
  ('parameter_list -> parameter_list SEMICOLON identifier_list COLON type','parameter_list',5,'p_parameter_list','main.py',279),
  ('type -> standart_type','type',1,'p_type','main.py',291),
  ('type -> ARRAY OPEN_SQUARE_BR NUMBER POINT POINT NUMBER CLOSE_SQUARE_BR OF standart_type','type',9,'p_type','main.py',292),
  ('type -> standart_string','type',1,'p_type','main.py',293),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','main.py',307),
  ('identifier_list -> identifier_list COMMA ID','identifier_list',3,'p_identifier_list','main.py',308),
  ('complex_declar -> identifier_list COLON type SEMICOLON','complex_declar',4,'p_complex_declar','main.py',321),
  ('complex_declar -> complex_declar identifier_list COLON type SEMICOLON','complex_declar',5,'p_complex_declar','main.py',322),
  ('standart_type -> INTEGER','standart_type',1,'p_standart_type','main.py',334),
  ('standart_type -> CHAR','standart_type',1,'p_standart_type','main.py',335),
  ('standart_type -> BOOLEAN','standart_type',1,'p_standart_type','main.py',336),
  ('standart_string -> STRING','standart_string',1,'p_standart_string','main.py',345),
  ('standart_string -> STRING OPEN_SQUARE_BR NUMBER CLOSE_SQUARE_BR','standart_string',4,'p_standart_string','main.py',346),
  ('standart_while -> WHILE OPEN_BR logic_expression CLOSE_BR DO compound_statement','standart_while',6,'p_standart_while','main.py',363),
  ('standart_while -> WHILE OPEN_BR logic_expression CLOSE_BR DO simple_statement','standart_while',6,'p_standart_while','main.py',364),
  ('standart_while -> WHILE OPEN_BR relational_expression CLOSE_BR DO compound_statement','standart_while',6,'p_standart_while','main.py',365),
  ('standart_while -> WHILE OPEN_BR relational_expression CLOSE_BR DO simple_statement','standart_while',6,'p_standart_while','main.py',366),
  ('standart_for -> FOR ID EQUALITY NUMBER TO NUMBER DO compound_statement','standart_for',8,'p_standart_for','main.py',376),
  ('standart_for -> FOR ID EQUALITY NUMBER DOWNTO NUMBER DO compound_statement','standart_for',8,'p_standart_for','main.py',377),
  ('assignment_expression -> ID EQUALITY NUMBER','assignment_expression',3,'p_assignment_expression','main.py',496),
  ('assignment_expression -> ID EQUALITY QUOTE ID QUOTE','assignment_expression',5,'p_assignment_expression','main.py',497),
  ('assignment_expression -> ID EQUALITY boolean_value','assignment_expression',3,'p_assignment_expression','main.py',498),
  ('assignment_expression -> ID EQUALITY math_expression','assignment_expression',3,'p_assignment_expression','main.py',499),
  ('assignment_expression -> ID EQUALITY logic_expression','assignment_expression',3,'p_assignment_expression','main.py',500),
  ('relational_expression -> simple_rel','relational_expression',1,'p_relational_expression','main.py',514),
  ('relational_expression -> complex_rel','relational_expression',1,'p_relational_expression','main.py',515),
  ('complex_rel -> simple_math rel_sign ID','complex_rel',3,'p_complex_rel','main.py',523),
  ('complex_rel -> complex_math rel_sign ID','complex_rel',3,'p_complex_rel','main.py',524),
  ('complex_rel -> ID rel_sign simple_math','complex_rel',3,'p_complex_rel','main.py',525),
  ('complex_rel -> ID rel_sign complex_math','complex_rel',3,'p_complex_rel','main.py',526),
  ('complex_rel -> simple_math rel_sign NUMBER','complex_rel',3,'p_complex_rel','main.py',527),
  ('complex_rel -> complex_math rel_sign NUMBER','complex_rel',3,'p_complex_rel','main.py',528),
  ('complex_rel -> NUMBER rel_sign simple_math','complex_rel',3,'p_complex_rel','main.py',529),
  ('complex_rel -> NUMBER rel_sign complex_math','complex_rel',3,'p_complex_rel','main.py',530),
  ('complex_rel -> OPEN_BR simple_math CLOSE_BR rel_sign ID','complex_rel',5,'p_complex_rel','main.py',531),
  ('complex_rel -> OPEN_BR complex_math CLOSE_BR rel_sign ID','complex_rel',5,'p_complex_rel','main.py',532),
  ('complex_rel -> ID rel_sign OPEN_BR simple_math CLOSE_BR','complex_rel',5,'p_complex_rel','main.py',533),
  ('complex_rel -> ID rel_sign OPEN_BR complex_math CLOSE_BR','complex_rel',5,'p_complex_rel','main.py',534),
  ('complex_rel -> OPEN_BR simple_math CLOSE_BR rel_sign NUMBER','complex_rel',5,'p_complex_rel','main.py',535),
  ('complex_rel -> OPEN_BR complex_math CLOSE_BR rel_sign NUMBER','complex_rel',5,'p_complex_rel','main.py',536),
  ('complex_rel -> NUMBER rel_sign OPEN_BR simple_math CLOSE_BR','complex_rel',5,'p_complex_rel','main.py',537),
  ('complex_rel -> NUMBER rel_sign OPEN_BR complex_math CLOSE_BR','complex_rel',5,'p_complex_rel','main.py',538),
  ('complex_rel -> math_expression rel_sign math_expression','complex_rel',3,'p_complex_rel','main.py',539),
  ('complex_rel -> OPEN_BR math_expression CLOSE_BR rel_sign OPEN_BR math_expression CLOSE_BR','complex_rel',7,'p_complex_rel','main.py',540),
  ('math_expression -> simple_math','math_expression',1,'p_math_expression','main.py',575),
  ('math_expression -> complex_math','math_expression',1,'p_math_expression','main.py',576),
  ('logic_expression -> simple_logic','logic_expression',1,'p_logic_expression','main.py',583),
  ('logic_expression -> complex_logic','logic_expression',1,'p_logic_expression','main.py',584),
  ('complex_math -> OPEN_BR simple_math CLOSE_BR math_sign ID','complex_math',5,'p_complex_math','main.py',592),
  ('complex_math -> OPEN_BR simple_math CLOSE_BR math_sign NUMBER','complex_math',5,'p_complex_math','main.py',593),
  ('complex_math -> ID math_sign OPEN_BR simple_math CLOSE_BR','complex_math',5,'p_complex_math','main.py',594),
  ('complex_math -> NUMBER math_sign OPEN_BR simple_math CLOSE_BR','complex_math',5,'p_complex_math','main.py',595),
  ('complex_math -> OPEN_BR simple_math CLOSE_BR math_sign OPEN_BR simple_math CLOSE_BR','complex_math',7,'p_complex_math','main.py',596),
  ('complex_math -> OPEN_BR simple_math CLOSE_BR math_sign OPEN_BR complex_math CLOSE_BR','complex_math',7,'p_complex_math','main.py',597),
  ('complex_math -> OPEN_BR complex_math CLOSE_BR math_sign ID','complex_math',5,'p_complex_math','main.py',598),
  ('complex_math -> OPEN_BR complex_math CLOSE_BR math_sign OPEN_BR simple_math CLOSE_BR','complex_math',7,'p_complex_math','main.py',599),
  ('complex_math -> OPEN_BR complex_math CLOSE_BR math_sign OPEN_BR complex_math CLOSE_BR','complex_math',7,'p_complex_math','main.py',600),
  ('complex_logic -> OPEN_BR simple_logic CLOSE_BR log_sign ID','complex_logic',5,'p_complex_logic','main.py',619),
  ('complex_logic -> OPEN_BR simple_logic CLOSE_BR log_sign OPEN_BR simple_logic CLOSE_BR','complex_logic',7,'p_complex_logic','main.py',620),
  ('complex_logic -> OPEN_BR complex_logic CLOSE_BR log_sign ID','complex_logic',5,'p_complex_logic','main.py',621),
  ('complex_logic -> OPEN_BR complex_logic CLOSE_BR log_sign OPEN_BR simple_logic CLOSE_BR','complex_logic',7,'p_complex_logic','main.py',622),
  ('simple_math -> ID math_sign ID','simple_math',3,'p_simple_math','main.py',633),
  ('simple_math -> ID math_sign NUMBER','simple_math',3,'p_simple_math','main.py',634),
  ('simple_math -> NUMBER math_sign ID','simple_math',3,'p_simple_math','main.py',635),
  ('simple_math -> NUMBER math_sign NUMBER','simple_math',3,'p_simple_math','main.py',636),
  ('compound_statement -> BEGIN simple_statement END','compound_statement',3,'p_compound_statement','main.py',645),
  ('simple_statement -> statement_list','simple_statement',1,'p_simple_statement','main.py',653),
  ('simple_statement -> empty','simple_statement',1,'p_simple_statement','main.py',654),
  ('statement_list -> statement','statement_list',1,'p_statement_list','main.py',663),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','main.py',664),
  ('statement -> assignment_expression','statement',1,'p_statement','main.py',677),
  ('statement -> standart_cycle','statement',1,'p_statement','main.py',678),
  ('simple_logic -> ID log_sign ID','simple_logic',3,'p_simple_logic','main.py',686),
  ('simple_rel -> ID rel_sign ID','simple_rel',3,'p_simple_rel','main.py',695),
  ('simple_rel -> ID rel_sign NUMBER','simple_rel',3,'p_simple_rel','main.py',696),
  ('simple_rel -> ID rel_sign QUOTE ID QUOTE','simple_rel',5,'p_simple_rel','main.py',697),
  ('log_sign -> AND','log_sign',1,'p_log_sign','main.py',710),
  ('log_sign -> OR','log_sign',1,'p_log_sign','main.py',711),
  ('rel_sign -> MORE_OR_EQUAL','rel_sign',1,'p_rel_sign','main.py',718),
  ('rel_sign -> LESS_OR_EQUAL','rel_sign',1,'p_rel_sign','main.py',719),
  ('rel_sign -> NOT_EQUAL','rel_sign',1,'p_rel_sign','main.py',720),
  ('rel_sign -> MORE','rel_sign',1,'p_rel_sign','main.py',721),
  ('rel_sign -> LESS','rel_sign',1,'p_rel_sign','main.py',722),
  ('rel_sign -> EQUALS','rel_sign',1,'p_rel_sign','main.py',723),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','main.py',731),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','main.py',732),
  ('math_sign -> PLUS','math_sign',1,'p_math_sign','main.py',739),
  ('math_sign -> MINUS','math_sign',1,'p_math_sign','main.py',740),
  ('math_sign -> DIVISION','math_sign',1,'p_math_sign','main.py',741),
  ('math_sign -> MULTIPLICATION','math_sign',1,'p_math_sign','main.py',742),
  ('math_sign -> DIV','math_sign',1,'p_math_sign','main.py',743),
  ('math_sign -> MOD','math_sign',1,'p_math_sign','main.py',744),
  ('empty -> <empty>','empty',0,'p_empty','main.py',750),
]
